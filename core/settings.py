"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u+ldq1zi2g)wgm*(aie7@tq8jw%tvxo)x)7clv4$aw^hm!tt-3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', 
    "corsheaders", # 
    'rest_framework.authtoken', #first package restframework  ...login and logout 

    # third packae django-allauth~=0.48.0 to use registeration endpoint in second package 
    "allauth", 
    "allauth.account", 
    "allauth.socialaccount", 
    "dj_rest_auth",#second package tokenbase  by authtoken  ... login and logout 
    "dj_rest_auth.registration", # django-allauth


    'drf_spectacular', # make sechema and documentaions for machines and humans 

    'apis',
    'blog',
    
]


# Rest config classes must be added 
REST_FRAMEWORK = {
  
    "DEFAULT_PERMISSION_CLASSES": [
      #AllowAny makes default permision class is_authenticated inactive or the same unrestricted for production 
        "rest_framework.permissions.AllowAny",  
    ], 

    "DEFAULT_AUTHENTICATION_CLASSES": [
      "rest_framework.authentication.SessionAuthentication",
      "rest_framework.authentication.TokenAuthentication",
    ],

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', # drf_spectacular setting
   
}





MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware", # django-cors-headers Middlewar added & located above CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]




# create a CORS_ALLOWED_ORIGINS config at the bottom of the file .
#it lets diffrent urls in using of front and back combine without security issues

CORS_ALLOWED_ORIGINS = [
  
    "http://localhost:3000",

]



# drf_spectacular setting anduse this command "python manage.py spectacular --file schema.yml "
# tip=rest_framework.authtoken needed to get use drf_spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'Library and blog app ',
    'DESCRIPTION': 'this app built with Django & React',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}



# csrf protection broker while using form in react to send data in backend 

# CSRF_TRUSTED_ORIGINS = ["localhost:3000"]



#And thatâ€™s it! Our back-end is now complete and capable of communicating with any front-end
#that uses port 3000
#  If our front-end of choice dictates a different port that can easily be updated
# in our code.






ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "django.template.context_processors.request", # django-allauth~=0.48.0
            ],
        },
    },
]

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend" # django-allauth~=0.48.0
SITE_ID = 1 # django-allauth~=0.48.0


WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR/"static/"

STATICFILES_DIRS = [
    BASE_DIR / "staticfiles",
    
]


MEDIA_URL = 'media/'
MEDIA_ROOT= BASE_DIR /"media/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
