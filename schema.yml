openapi: 3.0.3
info:
  title: 'Library and blog app '
  version: 1.0.0
  description: this app built with Django & React
paths:
  /api/:
    get:
      operationId: api_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/class/:
    get:
      operationId: api_class_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
          description: ''
  /api/class/detail/{id}/:
    get:
      operationId: api_class_detail_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
  /api/create/:
    post:
      operationId: api_create_create
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/delete/{id}/:
    delete:
      operationId: api_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/detail/{id}/:
    get:
      operationId: api_detail_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/edit/{id}/:
    post:
      operationId: api_edit_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/dj-rest-auth/login/:
    post:
      operationId: api_v1_dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/dj-rest-auth/logout/:
    post:
      operationId: api_v1_dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/password/change/:
    post:
      operationId: api_v1_dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/password/reset/:
    post:
      operationId: api_v1_dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: api_v1_dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/registration/:
    post:
      operationId: api_v1_dj_rest_auth_registration_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/dj-rest-auth/registration/resend-email/:
    post:
      operationId: api_v1_dj_rest_auth_registration_resend_email_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/registration/verify-email/:
    post:
      operationId: api_v1_dj_rest_auth_registration_verify_email_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/dj-rest-auth/user/:
    get:
      operationId: api_v1_dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: api_v1_dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: api_v1_dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /blog/category/:
    get:
      operationId: blog_category_list
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category_serializer'
          description: ''
    post:
      operationId: blog_category_create
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category_serializer'
          description: ''
  /blog/category/{id}/:
    get:
      operationId: blog_category_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category_serializer'
          description: ''
    put:
      operationId: blog_category_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category_serializer'
          description: ''
    patch:
      operationId: blog_category_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory_serializer'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category_serializer'
          description: ''
    delete:
      operationId: blog_category_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /blog/comment/:
    get:
      operationId: blog_comment_list
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment_serializer'
          description: ''
    post:
      operationId: blog_comment_create
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment_serializer'
          description: ''
  /blog/comment/{id}/:
    get:
      operationId: blog_comment_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment_serializer'
          description: ''
    put:
      operationId: blog_comment_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment_serializer'
          description: ''
    patch:
      operationId: blog_comment_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment_serializer'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment_serializer'
          description: ''
    delete:
      operationId: blog_comment_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /blog/post/:
    get:
      operationId: blog_post_list
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post_serializer'
          description: ''
    post:
      operationId: blog_post_create
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post_serializer'
          description: ''
  /blog/post/{id}/:
    get:
      operationId: blog_post_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post_serializer'
          description: ''
    put:
      operationId: blog_post_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post_serializer'
          description: ''
    patch:
      operationId: blog_post_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost_serializer'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post_serializer'
          description: ''
    delete:
      operationId: blog_post_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Post.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /blog/tag/:
    get:
      operationId: blog_tag_list
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag_serializer'
          description: ''
    post:
      operationId: blog_tag_create
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag_serializer'
          description: ''
  /blog/tag/{id}/:
    get:
      operationId: blog_tag_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag_serializer'
          description: ''
    put:
      operationId: blog_tag_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag_serializer'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag_serializer'
          description: ''
    patch:
      operationId: blog_tag_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTag_serializer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTag_serializer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTag_serializer'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag_serializer'
          description: ''
    delete:
      operationId: blog_tag_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - blog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 250
        subtitle:
          type: string
          maxLength: 250
        author:
          type: string
          maxLength: 250
        isbn:
          type: string
          maxLength: 250
        description:
          type: string
          nullable: true
        updated_time:
          type: string
          format: date-time
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
        status:
          type: boolean
      required:
      - author
      - created_time
      - id
      - isbn
      - subtitle
      - title
      - updated_time
    Category_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
      required:
      - id
      - title
    Comment_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        message:
          type: string
        active:
          type: boolean
        created_time:
          type: string
          format: date
          readOnly: true
        post:
          type: integer
      required:
      - created_time
      - email
      - id
      - message
      - name
      - post
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedCategory_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
    PatchedComment_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        message:
          type: string
        active:
          type: boolean
        created_time:
          type: string
          format: date
          readOnly: true
        post:
          type: integer
    PatchedPost_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 250
        brif_description:
          type: string
        description:
          type: string
        image:
          type: string
          format: uri
        updated_time:
          type: string
          format: date-time
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
        author:
          type: integer
        category:
          type: array
          items:
            type: integer
        tag:
          type: array
          items:
            type: integer
    PatchedTag_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    Post_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 250
        brif_description:
          type: string
        description:
          type: string
        image:
          type: string
          format: uri
        updated_time:
          type: string
          format: date-time
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
        author:
          type: integer
        category:
          type: array
          items:
            type: integer
        tag:
          type: array
          items:
            type: integer
      required:
      - author
      - brif_description
      - category
      - created_time
      - description
      - id
      - tag
      - title
      - updated_time
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password1
      - password2
      - username
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Tag_serializer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
      required:
      - id
      - title
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
